trigger:
  branches:
    exclude:
      - '*'

variables:
  buildConfiguration: 'Release'
  releaseBranchName: 'release'

stages:
- stage: 'Build'
  displayName: 'Build the web application'
  jobs: 
  - job: 'Build'
    displayName: 'Build job'
    pool:
      vmImage: 'ubuntu-20.04'
      demands:
      - npm

    variables:
      wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
      dotnetSdkVersion: '6.x'

    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET SDK $(dotnetSdkVersion)'
      inputs:
        version: '$(dotnetSdkVersion)'

    - task: Npm@1
      displayName: 'Run npm install'
      inputs:
        verbose: false

    - script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
      displayName: 'Compile Sass assets'

    - task: gulp@1
      displayName: 'Run gulp tasks'

    - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
      displayName: 'Write build info'
      workingDirectory: $(wwwrootDir)

    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build the project - $(buildConfiguration)'
      inputs:
        command: 'build'
        arguments: '--no-restore --configuration $(buildConfiguration)'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Publish the project - $(buildConfiguration)'
      inputs:
        command: 'publish'
        projects: '**/*.csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
        zipAfterPublish: true

    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: drop
    
- stage: 'Dev'
  displayName: 'Deploy to the dev environment'
  dependsOn: Build
  condition:  succeeded()
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-20.04'
    environment: dev
    variables:
    - group: Release
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzurePowerShell@5
            displayName: 'Get Agent public ip'
            inputs:
              azureSubscription: LL_SP
              ScriptType: InlineScript
              Inline: |
                $ipAddr = (Invoke-WebRequest -uri "http://ifconfig.me/ip").Content
              azurePowerShellVersion: LatestVersion
              
          - task: AzureCLI@1
            name: AddFirewallRule
            displayName: 'Add Firewall Rule to Azure Key Vault'
            inputs:
              azureSubscription: LL_SP
              scriptLocation: 'inlineScript'
              inlineScript: 'az keyvault network-rule add --resource-group $(KVrg) --name $(KVname) --ip-address $(ipAddr)'
              
          - task: AzureKeyVault@2
            inputs:
              azureSubscription: LL_SP
              KeyVaultName: '$(KVname)'
              SecretsFilter: '*'
              RunAsPreJob: false
              
          - download: current
            artifact: drop
            
          - task: AzureCLI@1
            name: RemoveFirewallRule
            displayName: 'Remove Firewall Rule from Azure Key Vault'
            inputs:
              azureSubscription: LL_SP
              scriptLocation: 'inlineScript'
              inlineScript: 'az keyvault network-rule remove --resource-group $(KVrg) --name $(KVname) --ip-address $(ipAddr)/32'
            
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: website'
            inputs:
              azureSubscription: LL_SP
              appType: 'webApp'
              appName: '$(WebAppName)'
              deployToSlotOrASE: true
              resourceGroupName: '$(WebAppRG)'
              slotName: '$(WebAppName_Dev_slot)'
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'
              deploymentMethod: 'auto'
